// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ThePixeler.Models;

#nullable disable

namespace ThePixeler.Migrations
{
    [DbContext(typeof(ThePixelerDbContext))]
    [Migration("20250808184513_InitialModel")]
    partial class InitialModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ThePixeler.Models.GiftCard", b =>
                {
                    b.Property<int>("GiftCardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GiftCardID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Months")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionID")
                        .HasColumnType("int");

                    b.HasKey("GiftCardID");

                    b.HasIndex("SubscriptionID");

                    b.ToTable("giftCards");
                });

            modelBuilder.Entity("ThePixeler.Models.Invite", b =>
                {
                    b.Property<int>("InviteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InviteID"));

                    b.Property<Guid>("ReceiverID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<Guid>("SenderID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InviteID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("RoomID");

                    b.HasIndex("SenderID");

                    b.ToTable("Invites");
                });

            modelBuilder.Entity("ThePixeler.Models.Pixel", b =>
                {
                    b.Property<int>("PixelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PixelID"));

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("xPosition")
                        .HasColumnType("int");

                    b.Property<int>("zPosition")
                        .HasColumnType("int");

                    b.HasKey("PixelID");

                    b.HasIndex("RoomID");

                    b.HasIndex("UserID");

                    b.ToTable("Pixels");
                });

            modelBuilder.Entity("ThePixeler.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ThePixeler.Models.Room", b =>
                {
                    b.Property<int>("RoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomID"));

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("RoomID");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("ThePixeler.Models.RoomUser", b =>
                {
                    b.Property<int>("RoomUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomUserID"));

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoomUserID");

                    b.HasIndex("RoleID");

                    b.HasIndex("RoomID");

                    b.HasIndex("UserID");

                    b.ToTable("RoomUsers");
                });

            modelBuilder.Entity("ThePixeler.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionID"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubscriptionID");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("ThePixeler.Models.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileBio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubscriptionID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("SubscriptionID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ThePixeler.Models.GiftCard", b =>
                {
                    b.HasOne("ThePixeler.Models.Subscription", "Subscription")
                        .WithMany("GiftCards")
                        .HasForeignKey("SubscriptionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("ThePixeler.Models.Invite", b =>
                {
                    b.HasOne("ThePixeler.Models.User", "Receiver")
                        .WithMany("InvitesReceived")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ThePixeler.Models.Room", "Room")
                        .WithMany("Invites")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ThePixeler.Models.User", "Sender")
                        .WithMany("InvitesSended")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Room");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ThePixeler.Models.Pixel", b =>
                {
                    b.HasOne("ThePixeler.Models.Room", "Room")
                        .WithMany("Pixels")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ThePixeler.Models.User", "User")
                        .WithMany("Pixels")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThePixeler.Models.RoomUser", b =>
                {
                    b.HasOne("ThePixeler.Models.Role", "Role")
                        .WithMany("RoomUsers")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ThePixeler.Models.Room", "Room")
                        .WithMany("RoomUsers")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ThePixeler.Models.User", "User")
                        .WithMany("RoomUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThePixeler.Models.User", b =>
                {
                    b.HasOne("ThePixeler.Models.Subscription", "Subscription")
                        .WithMany("Users")
                        .HasForeignKey("SubscriptionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("ThePixeler.Models.Role", b =>
                {
                    b.Navigation("RoomUsers");
                });

            modelBuilder.Entity("ThePixeler.Models.Room", b =>
                {
                    b.Navigation("Invites");

                    b.Navigation("Pixels");

                    b.Navigation("RoomUsers");
                });

            modelBuilder.Entity("ThePixeler.Models.Subscription", b =>
                {
                    b.Navigation("GiftCards");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ThePixeler.Models.User", b =>
                {
                    b.Navigation("InvitesReceived");

                    b.Navigation("InvitesSended");

                    b.Navigation("Pixels");

                    b.Navigation("RoomUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
